@model Program

@{
    ViewData["Title"] = "Add News";
}

<h1>Add News</h1>

<h4>Program</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="add_news" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group mb-3">
                <label for="Head_news" class="form-label">News Headline:</label>
                <input type="text" name="Head_news" class="form-control" required />
            </div>

            <div class="form-group mb-3">
                <label for="NewsHeadlinePics" class="form-label">Upload your Headline pictures:</label>
                <input type="file" id="NewsHeadlinePics" name="NewsHeadlinePics" class="form-control" accept=".jpg,.jpeg,.png">
                <div id="Headline-preview" class="mt-2 d-flex flex-wrap"></div>
            </div>

            <div class="form-group mb-3">
                <label for="comments" class="form-label">News Details:</label>
                <textarea name="comments" rows="10" class="form-control" placeholder="Enter detail of News..."></textarea>
            </div>

            <div class="form-group mb-3">
                <label for="otherPics" class="form-label">Upload your other pictures:</label>
                <input type="file" id="otherPics" name="otherPics" class="form-control" accept=".jpg,.jpeg,.png" multiple>
                <div id="otherPics-preview" class="mt-2 d-flex flex-wrap"></div>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Preview for single headline image
            const headlineInput = document.getElementById('NewsHeadlinePics');
            const headlinePreviewContainer = document.getElementById('Headline-preview');

            headlineInput.addEventListener('change', function (event) {
                headlinePreviewContainer.innerHTML = ''; // Clear previous preview
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        let img = document.createElement('img');
                        img.src = e.target.result;
                        img.classList.add('img-thumbnail', 'm-2');
                        img.style.maxHeight = '150px';
                        headlinePreviewContainer.appendChild(img);
                    }
                    reader.readAsDataURL(file);
                }
            });

            // Preview for multiple other pictures
                 const otherPicsInput = document.getElementById('otherPics');
            const otherPicsPreviewContainer = document.getElementById('otherPics-preview');

            // This array will hold the files we intend to upload.
            let fileStore = [];

            // Function to redraw the previews and update the file input
            function updatePreviewsAndFileInput() {
                // 1. Clear the current previews
                otherPicsPreviewContainer.innerHTML = '';

                // 2. Create a new DataTransfer object. This is a browser mechanism
                //    for holding files, which we'll use to update the input.
                const dataTransfer = new DataTransfer();

                // 3. Loop through our fileStore and create a preview for each file
                fileStore.forEach((file, index) => {
                    // Add the file to our DataTransfer object
                    dataTransfer.items.add(file);

                    // Create a container for the image and delete button
                    const previewWrapper = document.createElement('div');
                    previewWrapper.classList.add('position-relative', 'd-inline-block', 'm-2');

                    // Create the image preview
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.classList.add('img-thumbnail');
                        img.style.maxHeight = '150px';
                        previewWrapper.appendChild(img);
                    };
                    reader.readAsDataURL(file);

                    // Create the delete button
                    const deleteBtn = document.createElement('button');
                    deleteBtn.innerHTML = '&times;'; // A simple 'x' character for the icon
                    deleteBtn.classList.add('btn', 'btn-danger', 'btn-sm', 'position-absolute', 'top-0', 'end-0');
                    deleteBtn.style.cssText = 'line-height: 1; padding: 0.2rem 0.4rem; border-radius: 50%;';

                    // Add an event listener to the delete button
                    deleteBtn.onclick = function(event) {
                        event.preventDefault(); // Prevent any default button behavior
                        // Remove the file from our store at the specified index
                        fileStore.splice(index, 1);
                        // Call this function again to refresh the UI
                        updatePreviewsAndFileInput();
                    };

                    previewWrapper.appendChild(deleteBtn);
                    otherPicsPreviewContainer.appendChild(previewWrapper);
                });

                // 4. Finally, update the actual file input's files property with our new list
                otherPicsInput.files = dataTransfer.files;
            }

            // Listen for when the user selects new files
            otherPicsInput.addEventListener('change', function (event) {
                // Add the newly selected files to our fileStore array
                for (const file of event.target.files) {
                    fileStore.push(file);
                }

                // Update the UI
                updatePreviewsAndFileInput();

                
            });
        });
    </script>
}